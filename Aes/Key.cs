using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Aes
{
    public class Key
    {
        private static readonly byte[] Rcon = 
        {
            // https://en.wikipedia.org/wiki/Rijndael_key_schedule
            0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
            0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
            0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
            0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
            0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
            0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
            0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
            0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
            0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
            0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
            0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
            0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
            0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
            0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
            0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
            0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
        };
        private byte[,] _w;
        private int _size;

        public int Size
        {
            get { return _size; }
            set { _size = value; }
        }

        public byte[,] w
        {
            get { return _w; }
            set { _w = value; }
        }

        public Key(byte[] b)
        {
            _size = b.Length;
            int nk = _size / 4;  // key length (in words): 4/6/8 for 128/192/256-bit keys
            int nr = nk + 6;
            _w = new byte[4, 4 * (nr + 1)];
            for (int i = 0; i < nk; i++)
            {
                _w[0, i] = b[4 * i];
                _w[1, i] = b[4 * i + 1];
                _w[2, i] = b[4 * i + 2];
                _w[3, i] = b[4 * i + 3];
            }

            for (int i = nk; i < (4 * (nr + 1)); i++)
            {
                byte[] temp = new byte[4];
                temp[0] = _w[0, i - 1];
                temp[1] = _w[1, i - 1];
                temp[2] = _w[2, i - 1];
                temp[3] = _w[3, i - 1];
                if ((i % nk) == 0)
                {
                    temp = RowShift(temp);
                    temp = SubByte(temp);
                    temp[0] ^= Rcon[i / nk];
                }
                if ((nk == 8) && ((i % nk) == 4))
                {
                    temp = SubByte(temp);
                }
                _w[0, i] = (byte) (_w[0, i - nk] ^ temp[0]);
                _w[1, i] = (byte) (_w[1, i - nk] ^ temp[1]);
                _w[2, i] = (byte) (_w[2, i - nk] ^ temp[2]);
                _w[3, i] = (byte) (_w[3, i - nk] ^ temp[3]);
            }
        }

        private static byte[] SubByte(byte[] b)
        {
            for (int i = 0; i < b.Length; i++)
            {
                b[i] = Sbox.SboxTable[b[i]];
            }
            return (b);
        }

        private static byte[] RowShift(byte[] b)
        {
            byte[] temp = new byte[b.Length];
            for (int i = 0; i < b.Length-1; i++)
            {
                temp[i] = b[i + 1];
            }
            temp[b.Length - 1] = b[0];
            return (temp);
        }

        public override string ToString()
        {
            string s = "";
            for (int i = 0; i < _w.GetLength(0); i++)
            {
                for (int j = 0; j < _w.GetLength(1); j++)
                {
                    s += _w[i, j].ToString("X2") + " ";
                }
                s += "\n";
            }
            return (s);
        }
    }
}
